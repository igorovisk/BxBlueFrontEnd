{"ast":null,"code":"import { useCallback, useState } from 'react';\n\nfunction useMap() {\n  let initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Map();\n  const [map, setMap] = useState(new Map(initialState));\n  const actions = {\n    set: useCallback((key, value) => {\n      setMap(prev => {\n        const copy = new Map(prev);\n        copy.set(key, value);\n        return copy;\n      });\n    }, []),\n    setAll: useCallback(entries => {\n      setMap(() => new Map(entries));\n    }, []),\n    remove: useCallback(key => {\n      setMap(prev => {\n        const copy = new Map(prev);\n        copy.delete(key);\n        return copy;\n      });\n    }, []),\n    reset: useCallback(() => {\n      setMap(() => new Map());\n    }, [])\n  };\n  return [map, actions];\n}\n\nexport default useMap;","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;;AAeA,SAASC,MAAT,GAC8C;EAAA,IAA5CC,YAA4C,uEAAT,IAAIC,GAAJ,EAAS;EAE5C,MAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBL,QAAQ,CAAC,IAAIG,GAAJ,CAAQD,YAAR,CAAD,CAA9B;EAEA,MAAMI,OAAO,GAAkB;IAC7BC,GAAG,EAAER,WAAW,CAAC,CAACS,GAAD,EAAMC,KAAN,KAAe;MAC9BJ,MAAM,CAACK,IAAI,IAAG;QACZ,MAAMC,IAAI,GAAG,IAAIR,GAAJ,CAAQO,IAAR,CAAb;QACAC,IAAI,CAACJ,GAAL,CAASC,GAAT,EAAcC,KAAd;QACA,OAAOE,IAAP;MACD,CAJK,CAAN;IAKD,CANe,EAMb,EANa,CADa;IAS7BC,MAAM,EAAEb,WAAW,CAACc,OAAO,IAAG;MAC5BR,MAAM,CAAC,MAAM,IAAIF,GAAJ,CAAQU,OAAR,CAAP,CAAN;IACD,CAFkB,EAEhB,EAFgB,CATU;IAa7BC,MAAM,EAAEf,WAAW,CAACS,GAAG,IAAG;MACxBH,MAAM,CAACK,IAAI,IAAG;QACZ,MAAMC,IAAI,GAAG,IAAIR,GAAJ,CAAQO,IAAR,CAAb;QACAC,IAAI,CAACI,MAAL,CAAYP,GAAZ;QACA,OAAOG,IAAP;MACD,CAJK,CAAN;IAKD,CANkB,EAMhB,EANgB,CAbU;IAqB7BK,KAAK,EAAEjB,WAAW,CAAC,MAAK;MACtBM,MAAM,CAAC,MAAM,IAAIF,GAAJ,EAAP,CAAN;IACD,CAFiB,EAEf,EAFe;EArBW,CAA/B;EA0BA,OAAO,CAACC,GAAD,EAAME,OAAN,CAAP;AACD;;AAED,eAAeL,MAAf","names":["useCallback","useState","useMap","initialState","Map","map","setMap","actions","set","key","value","prev","copy","setAll","entries","remove","delete","reset"],"sources":["/Users/igor_acb/BxBlue_Igor/front_end/node_modules/usehooks-ts/src/useMap/useMap.ts"],"sourcesContent":["import { useCallback, useState } from 'react'\n\nexport type MapOrEntries<K, V> = Map<K, V> | [K, V][]\n\n// Public interface\nexport interface Actions<K, V> {\n  set: (key: K, value: V) => void\n  setAll: (entries: MapOrEntries<K, V>) => void\n  remove: (key: K) => void\n  reset: Map<K, V>['clear']\n}\n\n// We hide some setters from the returned map to disable autocompletion\ntype Return<K, V> = [Omit<Map<K, V>, 'set' | 'clear' | 'delete'>, Actions<K, V>]\n\nfunction useMap<K, V>(\n  initialState: MapOrEntries<K, V> = new Map(),\n): Return<K, V> {\n  const [map, setMap] = useState(new Map(initialState))\n\n  const actions: Actions<K, V> = {\n    set: useCallback((key, value) => {\n      setMap(prev => {\n        const copy = new Map(prev)\n        copy.set(key, value)\n        return copy\n      })\n    }, []),\n\n    setAll: useCallback(entries => {\n      setMap(() => new Map(entries))\n    }, []),\n\n    remove: useCallback(key => {\n      setMap(prev => {\n        const copy = new Map(prev)\n        copy.delete(key)\n        return copy\n      })\n    }, []),\n\n    reset: useCallback(() => {\n      setMap(() => new Map())\n    }, []),\n  }\n\n  return [map, actions]\n}\n\nexport default useMap\n"]},"metadata":{},"sourceType":"module"}