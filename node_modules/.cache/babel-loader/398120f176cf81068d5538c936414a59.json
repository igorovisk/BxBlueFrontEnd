{"ast":null,"code":"import { useEffect, useState } from 'react';\n\nfunction useScript(src) {\n  const [status, setStatus] = useState(src ? 'loading' : 'idle');\n  useEffect(() => {\n    if (!src) {\n      setStatus('idle');\n      return;\n    }\n\n    let script = document.querySelector(`script[src=\"${src}\"]`);\n\n    if (!script) {\n      script = document.createElement('script');\n      script.src = src;\n      script.async = true;\n      script.setAttribute('data-status', 'loading');\n      document.body.appendChild(script);\n\n      const setAttributeFromEvent = event => {\n        script?.setAttribute('data-status', event.type === 'load' ? 'ready' : 'error');\n      };\n\n      script.addEventListener('load', setAttributeFromEvent);\n      script.addEventListener('error', setAttributeFromEvent);\n    } else {\n      setStatus(script.getAttribute('data-status'));\n    }\n\n    const setStateFromEvent = event => {\n      setStatus(event.type === 'load' ? 'ready' : 'error');\n    };\n\n    script.addEventListener('load', setStateFromEvent);\n    script.addEventListener('error', setStateFromEvent);\n    return () => {\n      if (script) {\n        script.removeEventListener('load', setStateFromEvent);\n        script.removeEventListener('error', setStateFromEvent);\n      }\n    };\n  }, [src]);\n  return status;\n}\n\nexport default useScript;","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAKA,SAASC,SAAT,CAAmBC,GAAnB,EAA8B;EAC5B,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAASE,GAAG,GAAG,SAAH,GAAe,MAA3B,CAApC;EAEAH,SAAS,CACP,MAAK;IACH,IAAI,CAACG,GAAL,EAAU;MACRE,SAAS,CAAC,MAAD,CAAT;MACA;IACD;;IAID,IAAIC,MAAM,GAAcC,QAAQ,CAACC,aAAT,CAAuB,eAAeL,GAAG,IAAzC,CAAxB;;IAEA,IAAI,CAACG,MAAL,EAAa;MAEXA,MAAM,GAAGC,QAAQ,CAACE,aAAT,CAAuB,QAAvB,CAAT;MACAH,MAAM,CAACH,GAAP,GAAaA,GAAb;MACAG,MAAM,CAACI,KAAP,GAAe,IAAf;MACAJ,MAAM,CAACK,YAAP,CAAoB,aAApB,EAAmC,SAAnC;MAEAJ,QAAQ,CAACK,IAAT,CAAcC,WAAd,CAA0BP,MAA1B;;MAIA,MAAMQ,qBAAqB,GAAIC,KAAD,IAAiB;QAC7CT,MAAM,EAAEK,YAAR,CACE,aADF,EAEEI,KAAK,CAACC,IAAN,KAAe,MAAf,GAAwB,OAAxB,GAAkC,OAFpC;MAID,CALD;;MAOAV,MAAM,CAACW,gBAAP,CAAwB,MAAxB,EAAgCH,qBAAhC;MACAR,MAAM,CAACW,gBAAP,CAAwB,OAAxB,EAAiCH,qBAAjC;IACD,CApBD,MAoBO;MAELT,SAAS,CAACC,MAAM,CAACY,YAAP,CAAoB,aAApB,CAAD,CAAT;IACD;;IAKD,MAAMC,iBAAiB,GAAIJ,KAAD,IAAiB;MACzCV,SAAS,CAACU,KAAK,CAACC,IAAN,KAAe,MAAf,GAAwB,OAAxB,GAAkC,OAAnC,CAAT;IACD,CAFD;;IAKAV,MAAM,CAACW,gBAAP,CAAwB,MAAxB,EAAgCE,iBAAhC;IACAb,MAAM,CAACW,gBAAP,CAAwB,OAAxB,EAAiCE,iBAAjC;IAGA,OAAO,MAAK;MACV,IAAIb,MAAJ,EAAY;QACVA,MAAM,CAACc,mBAAP,CAA2B,MAA3B,EAAmCD,iBAAnC;QACAb,MAAM,CAACc,mBAAP,CAA2B,OAA3B,EAAoCD,iBAApC;MACD;IACF,CALD;EAMD,CAtDM,EAuDP,CAAChB,GAAD,CAvDO,CAAT;EA0DA,OAAOC,MAAP;AACD;;AAED,eAAeF,SAAf","names":["useEffect","useState","useScript","src","status","setStatus","script","document","querySelector","createElement","async","setAttribute","body","appendChild","setAttributeFromEvent","event","type","addEventListener","getAttribute","setStateFromEvent","removeEventListener"],"sources":["/Users/igor_acb/BxBlue_Igor/front_end/node_modules/usehooks-ts/src/useScript/useScript.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\n\nexport type Status = 'idle' | 'loading' | 'ready' | 'error'\nexport type ScriptElt = HTMLScriptElement | null\n\nfunction useScript(src: string): Status {\n  const [status, setStatus] = useState<Status>(src ? 'loading' : 'idle')\n\n  useEffect(\n    () => {\n      if (!src) {\n        setStatus('idle')\n        return\n      }\n\n      // Fetch existing script element by src\n      // It may have been added by another instance of this hook\n      let script: ScriptElt = document.querySelector(`script[src=\"${src}\"]`)\n\n      if (!script) {\n        // Create script\n        script = document.createElement('script')\n        script.src = src\n        script.async = true\n        script.setAttribute('data-status', 'loading')\n        // Add script to document body\n        document.body.appendChild(script)\n\n        // Store status in attribute on script\n        // This can be read by other instances of this hook\n        const setAttributeFromEvent = (event: Event) => {\n          script?.setAttribute(\n            'data-status',\n            event.type === 'load' ? 'ready' : 'error',\n          )\n        }\n\n        script.addEventListener('load', setAttributeFromEvent)\n        script.addEventListener('error', setAttributeFromEvent)\n      } else {\n        // Grab existing script status from attribute and set to state.\n        setStatus(script.getAttribute('data-status') as Status)\n      }\n\n      // Script event handler to update status in state\n      // Note: Even if the script already exists we still need to add\n      // event handlers to update the state for *this* hook instance.\n      const setStateFromEvent = (event: Event) => {\n        setStatus(event.type === 'load' ? 'ready' : 'error')\n      }\n\n      // Add event listeners\n      script.addEventListener('load', setStateFromEvent)\n      script.addEventListener('error', setStateFromEvent)\n\n      // Remove event listeners on cleanup\n      return () => {\n        if (script) {\n          script.removeEventListener('load', setStateFromEvent)\n          script.removeEventListener('error', setStateFromEvent)\n        }\n      }\n    },\n    [src], // Only re-run effect if script src changes\n  )\n\n  return status\n}\n\nexport default useScript\n"]},"metadata":{},"sourceType":"module"}