{"ast":null,"code":"var _jsxFileName = \"/Users/igor_acb/BxBlue_Igor/front_end/src/contexts/authContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { createContext, useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction checkIfLoggedIn() {\n  const loginToken = localStorage.getItem(\"tokenObj\") || \"\";\n\n  if (loginToken) {\n    const parsedToken = JSON.parse(loginToken) || {};\n    console.log(parsedToken.expirationDate, \"PARSED\");\n\n    if (new Date(parsedToken.expirationDate) > new Date()) {\n      return true;\n    } else {\n      localStorage.clear();\n      return false;\n    }\n  } else return false;\n}\n\nexport const AuthContext = /*#__PURE__*/createContext({\n  handleLogin: (email, password) => {},\n  handleLogout: () => {},\n  isLogged: false\n}); //AUTHCONTEXT PROVIDER COMPONENT THAT WILL WRAP THE ENTIRE APP.\n\nexport const AuthProvider = props => {\n  _s();\n\n  const [isLogged, setIsLogged] = useState(checkIfLoggedIn());\n  const [jwtToken, setJwtToken] = useState(\"\"); // LOGIN FUNCTION TO BE PASSED TO COMPONENTS BY CONTEXT\n\n  async function handleLogin(email, password) {\n    try {\n      await axios.post(\"http://localhost:3000/login\", {\n        email: email,\n        password: password\n      }).then(res => {\n        setIsLogged(true);\n        setJwtToken(res.data.token);\n        const tokenObj = {\n          token: res.data.token,\n          userId: res.data._id,\n          name: res.data.name,\n          auth: res.data.auth\n        };\n        localStorage.setItem(\"tokenObj\", JSON.stringify(tokenObj)); // window.location.href = \"/home\";\n      });\n    } catch (err) {\n      console.log(err.message, \"error\");\n    }\n  } // LOGOUT FUNCTION\n\n\n  function handleLogout() {\n    localStorage.setItem(\"tokenObj\", \"\");\n  } //CONTEXT VALUE TO BE PASSED TO PROVIDER AND BE ACESSED BY OTHER COMPONENTS (value attribute is like a custom prop in a custom component)\n\n\n  const authContextValue = {\n    handleLogin,\n    isLogged,\n    handleLogout,\n    jwtToken\n  }; //RETURNS PROVIDER WITH VALUE PROP\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authContextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 7\n  }, this);\n}; //CUSTOM HOOK TO MAKE IMPORT EASIER. USAGE EXAMPLE: const authcontext = useAuth()\n\n_s(AuthProvider, \"/0BVQut5pyliO2EP8lfsek+tVF8=\");\n\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n\n  return useContext(AuthContext);\n};\n\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["axios","createContext","useContext","useState","checkIfLoggedIn","loginToken","localStorage","getItem","parsedToken","JSON","parse","console","log","expirationDate","Date","clear","AuthContext","handleLogin","email","password","handleLogout","isLogged","AuthProvider","props","setIsLogged","jwtToken","setJwtToken","post","then","res","data","token","tokenObj","userId","_id","name","auth","setItem","stringify","err","message","authContextValue","children","useAuth"],"sources":["/Users/igor_acb/BxBlue_Igor/front_end/src/contexts/authContext.tsx"],"sourcesContent":["import axios from \"axios\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\n\nfunction checkIfLoggedIn() {\n   const loginToken = localStorage.getItem(\"tokenObj\") || \"\";\n   if (loginToken) {\n      const parsedToken = JSON.parse(loginToken) || {};\n      console.log(parsedToken.expirationDate, \"PARSED\");\n      if (new Date(parsedToken.expirationDate) > new Date()) {\n         return true;\n      } else {\n         localStorage.clear();\n         return false;\n      }\n   } else return false;\n}\nexport const AuthContext = createContext({\n   handleLogin: (email: string, password: string) => {},\n   handleLogout: () => {},\n   isLogged: false,\n});\n\n//AUTHCONTEXT PROVIDER COMPONENT THAT WILL WRAP THE ENTIRE APP.\nexport const AuthProvider = (props: any) => {\n   const [isLogged, setIsLogged] = useState<boolean>(checkIfLoggedIn());\n   const [jwtToken, setJwtToken] = useState<string>(\"\");\n   // LOGIN FUNCTION TO BE PASSED TO COMPONENTS BY CONTEXT\n   async function handleLogin(email: string, password: string) {\n      try {\n         await axios\n            .post(\"http://localhost:3000/login\", {\n               email: email,\n               password: password,\n            })\n            .then((res: any) => {\n               setIsLogged(true);\n               setJwtToken(res.data.token);\n\n               const tokenObj = {\n                  token: res.data.token,\n                  userId: res.data._id,\n                  name: res.data.name,\n                  auth: res.data.auth,\n               };\n\n               localStorage.setItem(\"tokenObj\", JSON.stringify(tokenObj));\n\n               // window.location.href = \"/home\";\n            });\n      } catch (err: any) {\n         console.log(err.message, \"error\");\n      }\n   }\n\n   // LOGOUT FUNCTION\n   function handleLogout() {\n      localStorage.setItem(\"tokenObj\", \"\");\n   }\n\n   //CONTEXT VALUE TO BE PASSED TO PROVIDER AND BE ACESSED BY OTHER COMPONENTS (value attribute is like a custom prop in a custom component)\n   const authContextValue = {\n      handleLogin,\n      isLogged,\n      handleLogout,\n      jwtToken,\n   };\n\n   //RETURNS PROVIDER WITH VALUE PROP\n   return (\n      <AuthContext.Provider value={authContextValue}>\n         {props.children}\n      </AuthContext.Provider>\n   );\n};\n\n//CUSTOM HOOK TO MAKE IMPORT EASIER. USAGE EXAMPLE: const authcontext = useAuth()\nexport const useAuth = () => useContext(AuthContext);\n"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAA+CC,QAA/C,QAA+D,OAA/D;;;AAEA,SAASC,eAAT,GAA2B;EACxB,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,KAAoC,EAAvD;;EACA,IAAIF,UAAJ,EAAgB;IACb,MAAMG,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWL,UAAX,KAA0B,EAA9C;IACAM,OAAO,CAACC,GAAR,CAAYJ,WAAW,CAACK,cAAxB,EAAwC,QAAxC;;IACA,IAAI,IAAIC,IAAJ,CAASN,WAAW,CAACK,cAArB,IAAuC,IAAIC,IAAJ,EAA3C,EAAuD;MACpD,OAAO,IAAP;IACF,CAFD,MAEO;MACJR,YAAY,CAACS,KAAb;MACA,OAAO,KAAP;IACF;EACH,CATD,MASO,OAAO,KAAP;AACT;;AACD,OAAO,MAAMC,WAAW,gBAAGf,aAAa,CAAC;EACtCgB,WAAW,EAAE,CAACC,KAAD,EAAgBC,QAAhB,KAAqC,CAAE,CADd;EAEtCC,YAAY,EAAE,MAAM,CAAE,CAFgB;EAGtCC,QAAQ,EAAE;AAH4B,CAAD,CAAjC,C,CAMP;;AACA,OAAO,MAAMC,YAAY,GAAIC,KAAD,IAAgB;EAAA;;EACzC,MAAM,CAACF,QAAD,EAAWG,WAAX,IAA0BrB,QAAQ,CAAUC,eAAe,EAAzB,CAAxC;EACA,MAAM,CAACqB,QAAD,EAAWC,WAAX,IAA0BvB,QAAQ,CAAS,EAAT,CAAxC,CAFyC,CAGzC;;EACA,eAAec,WAAf,CAA2BC,KAA3B,EAA0CC,QAA1C,EAA4D;IACzD,IAAI;MACD,MAAMnB,KAAK,CACP2B,IADE,CACG,6BADH,EACkC;QAClCT,KAAK,EAAEA,KAD2B;QAElCC,QAAQ,EAAEA;MAFwB,CADlC,EAKFS,IALE,CAKIC,GAAD,IAAc;QACjBL,WAAW,CAAC,IAAD,CAAX;QACAE,WAAW,CAACG,GAAG,CAACC,IAAJ,CAASC,KAAV,CAAX;QAEA,MAAMC,QAAQ,GAAG;UACdD,KAAK,EAAEF,GAAG,CAACC,IAAJ,CAASC,KADF;UAEdE,MAAM,EAAEJ,GAAG,CAACC,IAAJ,CAASI,GAFH;UAGdC,IAAI,EAAEN,GAAG,CAACC,IAAJ,CAASK,IAHD;UAIdC,IAAI,EAAEP,GAAG,CAACC,IAAJ,CAASM;QAJD,CAAjB;QAOA9B,YAAY,CAAC+B,OAAb,CAAqB,UAArB,EAAiC5B,IAAI,CAAC6B,SAAL,CAAeN,QAAf,CAAjC,EAXiB,CAajB;MACF,CAnBE,CAAN;IAoBF,CArBD,CAqBE,OAAOO,GAAP,EAAiB;MAChB5B,OAAO,CAACC,GAAR,CAAY2B,GAAG,CAACC,OAAhB,EAAyB,OAAzB;IACF;EACH,CA7BwC,CA+BzC;;;EACA,SAASpB,YAAT,GAAwB;IACrBd,YAAY,CAAC+B,OAAb,CAAqB,UAArB,EAAiC,EAAjC;EACF,CAlCwC,CAoCzC;;;EACA,MAAMI,gBAAgB,GAAG;IACtBxB,WADsB;IAEtBI,QAFsB;IAGtBD,YAHsB;IAItBK;EAJsB,CAAzB,CArCyC,CA4CzC;;EACA,oBACG,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAEgB,gBAA7B;IAAA,UACIlB,KAAK,CAACmB;EADV;IAAA;IAAA;IAAA;EAAA,QADH;AAKF,CAlDM,C,CAoDP;;GApDapB,Y;;KAAAA,Y;AAqDb,OAAO,MAAMqB,OAAO,GAAG;EAAA;;EAAA,OAAMzC,UAAU,CAACc,WAAD,CAAhB;AAAA,CAAhB;;IAAM2B,O"},"metadata":{},"sourceType":"module"}