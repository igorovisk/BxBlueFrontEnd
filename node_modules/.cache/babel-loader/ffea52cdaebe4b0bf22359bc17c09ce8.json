{"ast":null,"code":"var _jsxFileName = \"/Users/igor_acb/BxBlue_Igor/front_end/src/components/form/RegisterForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport Button from \"../button/singleButton\";\nimport Input from \"../input/index\";\nimport styles from \"./Form.module.scss\";\nimport Modal from \"react-modal\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction RegisterForm() {\n  _s();\n\n  const [email, setEmail] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [passwordConfirmation, setPasswordConfirmation] = useState(\"\");\n  const [renderPasswordWarning, setRenderPasswordWarning] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [alreadyRegisteredEmail, setAlreadyRegisteredEmail] = useState(false);\n  const [modalText, setModalText] = useState(\"\");\n\n  function closeModalAndClearInputFields() {\n    setEmail(\"\");\n    setName(\"\");\n    setPassword(\"\");\n    setPasswordConfirmation(\"deposit\");\n  }\n\n  function handleEmailChange(event) {\n    setAlreadyRegisteredEmail(false);\n    setEmail(event.target.value);\n  }\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n\n    if (password !== passwordConfirmation) {\n      setRenderPasswordWarning(true);\n      return;\n    }\n\n    const newUser = {\n      email: email,\n      name: name,\n      password: password\n    };\n\n    try {\n      const addUserToDatabase = await axios.post(\"http://localhost:3000/users/\", newUser).then(res => {\n        console.log(res, \"res\");\n        setModalText(\"Usuário registrado com sucesso :D\");\n        setIsOpen(true);\n        closeModalAndClearInputFields();\n      });\n    } catch (err) {\n      console.log(err, \"ERR\");\n\n      if (err.response.data.error.includes(\"email\")) {\n        setModalText(\"Email inválido\");\n      }\n\n      setModalText(\"Usuário já registrado :(\");\n      setIsOpen(true);\n    }\n\n    closeModalAndClearInputFields();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isOpen,\n      onRequestClose: () => setIsOpen(false),\n      overlayClassName: \"react-modal-overlay\",\n      className: \"react-modal-content react-modal-content-animation \",\n      children: modalText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleFormSubmit,\n      className: styles.form,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        inputName: \"email\",\n        type: \"email\",\n        label: \"Email\",\n        value: email,\n        placeholder: \"Escolha o seu melhor email\",\n        handleChange: handleEmailChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this), alreadyRegisteredEmail && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Email j\\xE1 cadastrado\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 40\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        inputName: \"username\",\n        type: \"text\",\n        label: \"Nome\",\n        value: name,\n        placeholder: \"Digite seu nome completo\",\n        handleChange: ev => setName(ev.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        inputName: \"password\",\n        type: \"password\",\n        label: \"Senha\",\n        value: password,\n        placeholder: \"Crie uma senha\",\n        handleChange: ev => setPassword(ev.target.value),\n        minLength: 6,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this), renderPasswordWarning && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Senhas n\\xE3o conferem.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 39\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        inputName: \"passwordConfirmation\",\n        type: \"password\",\n        label: \"Confirme sua senha\",\n        value: passwordConfirmation,\n        placeholder: \"Repita a sua senha criada acima\",\n        handleChange: ev => setPasswordConfirmation(ev.target.value),\n        required: true,\n        minLength: 6\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"Confirmar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true);\n}\n\n_s(RegisterForm, \"b4Mcd2lJI2rakGuLzmakqE5MF2E=\");\n\n_c = RegisterForm;\nexport default RegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"names":["useState","Button","Input","styles","Modal","axios","RegisterForm","email","setEmail","name","setName","password","setPassword","passwordConfirmation","setPasswordConfirmation","renderPasswordWarning","setRenderPasswordWarning","isOpen","setIsOpen","alreadyRegisteredEmail","setAlreadyRegisteredEmail","modalText","setModalText","closeModalAndClearInputFields","handleEmailChange","event","target","value","handleFormSubmit","preventDefault","newUser","addUserToDatabase","post","then","res","console","log","err","response","data","error","includes","form","ev"],"sources":["/Users/igor_acb/BxBlue_Igor/front_end/src/components/form/RegisterForm.tsx"],"sourcesContent":["import { ChangeEvent, FormEvent, useState } from \"react\";\nimport Button from \"../button/singleButton\";\nimport Input from \"../input/index\";\nimport styles from \"./Form.module.scss\";\nimport Modal from \"react-modal\";\nimport axios, { AxiosResponse } from \"axios\";\n\nfunction RegisterForm() {\n   const [email, setEmail] = useState<string>(\"\");\n   const [name, setName] = useState<string>(\"\");\n   const [password, setPassword] = useState<string>(\"\");\n   const [passwordConfirmation, setPasswordConfirmation] = useState<string>(\"\");\n   const [renderPasswordWarning, setRenderPasswordWarning] =\n      useState<boolean>(false);\n   const [isOpen, setIsOpen] = useState<boolean>(false);\n   const [alreadyRegisteredEmail, setAlreadyRegisteredEmail] =\n      useState<boolean>(false);\n   const [modalText, setModalText] = useState<string>(\"\");\n   function closeModalAndClearInputFields() {\n      setEmail(\"\");\n      setName(\"\");\n      setPassword(\"\");\n      setPasswordConfirmation(\"deposit\");\n   }\n\n   function handleEmailChange(event: ChangeEvent<HTMLInputElement>) {\n      setAlreadyRegisteredEmail(false);\n      setEmail(event.target.value);\n   }\n\n   const handleFormSubmit = async (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n\n      if (password !== passwordConfirmation) {\n         setRenderPasswordWarning(true);\n         return;\n      }\n\n      const newUser = {\n         email: email,\n         name: name,\n         password: password,\n      };\n      try {\n         const addUserToDatabase = await axios\n            .post(\"http://localhost:3000/users/\", newUser)\n            .then((res) => {\n               console.log(res, \"res\");\n               setModalText(\"Usuário registrado com sucesso :D\");\n               setIsOpen(true);\n               closeModalAndClearInputFields();\n            });\n      } catch (err: any) {\n         console.log(err, \"ERR\");\n         if (err.response.data.error.includes(\"email\")) {\n            setModalText(\"Email inválido\");\n         }\n         setModalText(\"Usuário já registrado :(\");\n         setIsOpen(true);\n      }\n\n      closeModalAndClearInputFields();\n   };\n\n   return (\n      <>\n         <Modal\n            isOpen={isOpen}\n            onRequestClose={() => setIsOpen(false)}\n            overlayClassName=\"react-modal-overlay\"\n            className=\"react-modal-content react-modal-content-animation \"\n         >\n            {modalText}\n         </Modal>\n         <form onSubmit={handleFormSubmit} className={styles.form}>\n            <Input\n               inputName=\"email\"\n               type=\"email\"\n               label=\"Email\"\n               value={email}\n               placeholder=\"Escolha o seu melhor email\"\n               handleChange={handleEmailChange}\n               required={true}\n            ></Input>\n            {alreadyRegisteredEmail && <p>Email já cadastrado</p>}\n            <Input\n               inputName=\"username\"\n               type=\"text\"\n               label=\"Nome\"\n               value={name}\n               placeholder=\"Digite seu nome completo\"\n               handleChange={(ev: ChangeEvent<HTMLInputElement>) =>\n                  setName(ev.target.value)\n               }\n               required={true}\n            ></Input>\n            <Input\n               inputName=\"password\"\n               type=\"password\"\n               label=\"Senha\"\n               value={password}\n               placeholder=\"Crie uma senha\"\n               handleChange={(ev: ChangeEvent<HTMLInputElement>) =>\n                  setPassword(ev.target.value)\n               }\n               minLength={6}\n               required={true}\n            ></Input>\n            {renderPasswordWarning && <p>Senhas não conferem.</p>}\n            <Input\n               inputName=\"passwordConfirmation\"\n               type=\"password\"\n               label=\"Confirme sua senha\"\n               value={passwordConfirmation}\n               placeholder=\"Repita a sua senha criada acima\"\n               handleChange={(ev: ChangeEvent<HTMLInputElement>) =>\n                  setPasswordConfirmation(ev.target.value)\n               }\n               required={true}\n               minLength={6}\n            ></Input>\n            <Button type=\"submit\">Confirmar</Button>\n         </form>\n      </>\n   );\n}\n\nexport default RegisterForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}