{"ast":null,"code":"import { useCallback } from 'react';\nimport { useBoolean } from '../useBoolean';\nimport { useCounter } from '../useCounter';\nimport { useInterval } from '../useInterval';\n\nfunction useCountdown(countdownOption) {\n  let isDeprecated = false;\n  let countStart, intervalMs, isIncrement, countStop;\n\n  if ('seconds' in countdownOption) {\n    console.warn('[useCountdown:DEPRECATED] new interface is already available (see https://usehooks-ts.com/react-hook/use-countdown), the old version will retire on usehooks-ts@3.');\n    isDeprecated = true;\n    countStart = countdownOption.seconds;\n    intervalMs = countdownOption.interval;\n    isIncrement = countdownOption.isIncrement;\n  } else {\n    ;\n    ({\n      countStart,\n      intervalMs,\n      isIncrement,\n      countStop\n    } = countdownOption);\n  }\n\n  intervalMs = intervalMs ?? 1000;\n  isIncrement = isIncrement ?? false;\n  countStop = countStop ?? 0;\n  const {\n    count,\n    increment,\n    decrement,\n    reset: resetCounter\n  } = useCounter(countStart);\n  const {\n    value: isCountdownRunning,\n    setTrue: startCountdown,\n    setFalse: stopCountdown\n  } = useBoolean(false);\n\n  const resetCountdown = () => {\n    stopCountdown();\n    resetCounter();\n  };\n\n  const countdownCallback = useCallback(() => {\n    if (count === countStop) {\n      stopCountdown();\n      return;\n    }\n\n    if (isIncrement) {\n      increment();\n    } else {\n      decrement();\n    }\n  }, [count, countStop, decrement, increment, isIncrement, stopCountdown]);\n  useInterval(countdownCallback, isCountdownRunning ? intervalMs : null);\n  return isDeprecated ? [count, {\n    start: startCountdown,\n    stop: stopCountdown,\n    reset: resetCountdown\n  }] : [count, {\n    startCountdown,\n    stopCountdown,\n    resetCountdown\n  }];\n}\n\nexport default useCountdown;","map":{"version":3,"mappings":"AACA,SAASA,WAAT,QAA4B,OAA5B;AAGA,SAASC,UAAT,QAA2B,eAA3B;AAEA,SAASC,UAAT,QAA2B,eAA3B;AAEA,SAASC,WAAT,QAA4B,gBAA5B;;AAuDA,SAASC,YAAT,CACEC,eADF,EACqD;EAKnD,IAAIC,YAAY,GAAG,KAAnB;EAEA,IAAIC,UAAJ,EACEC,UADF,EAEEC,WAFF,EAGEC,SAHF;;EAKA,IAAI,aAAaL,eAAjB,EAAkC;IAChCM,OAAO,CAACC,IAAR,CACE,oKADF;IAIAN,YAAY,GAAG,IAAf;IACAC,UAAU,GAAGF,eAAe,CAACQ,OAA7B;IACAL,UAAU,GAAGH,eAAe,CAACS,QAA7B;IACAL,WAAW,GAAGJ,eAAe,CAACI,WAA9B;EACD,CATD,MASO;IAEL;IAAC,CAAC;MAAEF,UAAF;MAAcC,UAAd;MAA0BC,WAA1B;MAAuCC;IAAvC,IAAqDL,eAAtD;EACF;;EAGDG,UAAU,GAAGA,UAAU,IAAI,IAA3B;EACAC,WAAW,GAAGA,WAAW,IAAI,KAA7B;EACAC,SAAS,GAAGA,SAAS,IAAI,CAAzB;EAEA,MAAM;IACJK,KADI;IAEJC,SAFI;IAGJC,SAHI;IAIJC,KAAK,EAAEC;EAJH,IAKFjB,UAAU,CAACK,UAAD,CALd;EAaA,MAAM;IACJa,KAAK,EAAEC,kBADH;IAEJC,OAAO,EAAEC,cAFL;IAGJC,QAAQ,EAAEC;EAHN,IAIFxB,UAAU,CAAC,KAAD,CAJd;;EASA,MAAMyB,cAAc,GAAG,MAAK;IAC1BD,aAAa;IACbN,YAAY;EACb,CAHD;;EAKA,MAAMQ,iBAAiB,GAAG3B,WAAW,CAAC,MAAK;IACzC,IAAIe,KAAK,KAAKL,SAAd,EAAyB;MACvBe,aAAa;MACb;IACD;;IAED,IAAIhB,WAAJ,EAAiB;MACfO,SAAS;IACV,CAFD,MAEO;MACLC,SAAS;IACV;EACF,CAXoC,EAWlC,CAACF,KAAD,EAAQL,SAAR,EAAmBO,SAAnB,EAA8BD,SAA9B,EAAyCP,WAAzC,EAAsDgB,aAAtD,CAXkC,CAArC;EAaAtB,WAAW,CAACwB,iBAAD,EAAoBN,kBAAkB,GAAGb,UAAH,GAAgB,IAAtD,CAAX;EAEA,OAAOF,YAAY,GACf,CACES,KADF,EAEE;IACEa,KAAK,EAAEL,cADT;IAEEM,IAAI,EAAEJ,aAFR;IAGEP,KAAK,EAAEQ;EAHT,CAFF,CADe,GASf,CACEX,KADF,EAEE;IACEQ,cADF;IAEEE,aAFF;IAGEC;EAHF,CAFF,CATJ;AAiBD;;AAED,eAAetB,YAAf","names":["useCallback","useBoolean","useCounter","useInterval","useCountdown","countdownOption","isDeprecated","countStart","intervalMs","isIncrement","countStop","console","warn","seconds","interval","count","increment","decrement","reset","resetCounter","value","isCountdownRunning","setTrue","startCountdown","setFalse","stopCountdown","resetCountdown","countdownCallback","start","stop"],"sources":["/Users/igor_acb/BxBlue_Igor/front_end/node_modules/usehooks-ts/src/useCountdown/useCountdown.ts"],"sourcesContent":["// TODO: example and test\nimport { useCallback } from 'react'\n\n// See: https://usehooks-ts.com/react-hook/use-boolean\nimport { useBoolean } from '../useBoolean'\n// See: https://usehooks-ts.com/react-hook/use-counter\nimport { useCounter } from '../useCounter'\n// See: https://usehooks-ts.com/react-hook/use-interval\nimport { useInterval } from '../useInterval'\n\n// Old interface IN & OUT\ninterface UseCountdownType {\n  seconds: number\n  interval: number\n  isIncrement?: boolean\n}\ninterface CountdownHelpers {\n  start: () => void\n  stop: () => void\n  reset: () => void\n}\n\n// New interface IN & OUT\ninterface CountdownOption {\n  countStart: number\n  intervalMs?: number\n  isIncrement?: boolean\n  countStop?: number\n}\ninterface CountdownControllers {\n  startCountdown: () => void\n  stopCountdown: () => void\n  resetCountdown: () => void\n}\n\n/**\n *\n * @param  {UseCountdownType} countdownOption\n * @param  {number} countdownOption.seconds the countdown's number, generally time seconds\n * @param  {number} countdownOption.interval the countdown's interval, milliseconds\n * @param  {?boolean} countdownOption.isIncrement false by default, determine the countdown is increment, otherwise is decrement\n * @returns [counter, CountdownControllers]\n *\n * @deprecated new useCountdown interface is already available (see https://usehooks-ts.com/react-hook/use-countdown), the old version will retire on usehooks-ts@3\n */\nfunction useCountdown(\n  countdownOption: UseCountdownType,\n): [number, CountdownHelpers]\n\n/**\n * New interface with default value\n *\n * @param  {CountdownOption} countdownOption\n * @param  {number} countdownOption.countStart - the countdown's starting number, initial value of the returned number.\n * @param  {?number} countdownOption.countStop -  `0` by default, the countdown's stopping number. Pass `-Infinity` to decrease forever.\n * @param  {?number} countdownOption.intervalMs - `1000` by default, the countdown's interval, in milliseconds.\n * @param  {?boolean} countdownOption.isIncrement - `false` by default, true if the countdown is increment.\n * @returns [counter, CountdownControllers]\n */\nfunction useCountdown(\n  countdownOption: CountdownOption,\n): [number, CountdownControllers]\n\nfunction useCountdown(\n  countdownOption: UseCountdownType | CountdownOption,\n): [number, CountdownHelpers | CountdownControllers] {\n  /**\n   * Use to determine the the API call is a deprecated version.\n   */\n  let isDeprecated = false\n\n  let countStart,\n    intervalMs,\n    isIncrement: boolean | undefined,\n    countStop: number | undefined\n\n  if ('seconds' in countdownOption) {\n    console.warn(\n      '[useCountdown:DEPRECATED] new interface is already available (see https://usehooks-ts.com/react-hook/use-countdown), the old version will retire on usehooks-ts@3.',\n    )\n\n    isDeprecated = true\n    countStart = countdownOption.seconds\n    intervalMs = countdownOption.interval\n    isIncrement = countdownOption.isIncrement\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-extra-semi\n    ;({ countStart, intervalMs, isIncrement, countStop } = countdownOption)\n  }\n\n  // default values\n  intervalMs = intervalMs ?? 1000\n  isIncrement = isIncrement ?? false\n  countStop = countStop ?? 0\n\n  const {\n    count,\n    increment,\n    decrement,\n    reset: resetCounter,\n  } = useCounter(countStart)\n\n  /**\n   * Note: used to control the useInterval\n   * running: If true, the interval is running\n   * start: Should set running true to trigger interval\n   * stop: Should set running false to remove interval\n   */\n  const {\n    value: isCountdownRunning,\n    setTrue: startCountdown,\n    setFalse: stopCountdown,\n  } = useBoolean(false)\n\n  /**\n   * Will set running false and reset the seconds to initial value\n   */\n  const resetCountdown = () => {\n    stopCountdown()\n    resetCounter()\n  }\n\n  const countdownCallback = useCallback(() => {\n    if (count === countStop) {\n      stopCountdown()\n      return\n    }\n\n    if (isIncrement) {\n      increment()\n    } else {\n      decrement()\n    }\n  }, [count, countStop, decrement, increment, isIncrement, stopCountdown])\n\n  useInterval(countdownCallback, isCountdownRunning ? intervalMs : null)\n\n  return isDeprecated\n    ? [\n        count,\n        {\n          start: startCountdown,\n          stop: stopCountdown,\n          reset: resetCountdown,\n        } as CountdownHelpers,\n      ]\n    : [\n        count,\n        {\n          startCountdown,\n          stopCountdown,\n          resetCountdown,\n        } as CountdownControllers,\n      ]\n}\n\nexport default useCountdown\n"]},"metadata":{},"sourceType":"module"}