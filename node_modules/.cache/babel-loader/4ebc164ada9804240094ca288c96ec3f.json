{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { useEventListener } from '../useEventListener';\n\nfunction useReadLocalStorage(key) {\n  const readValue = useCallback(() => {\n    if (typeof window === 'undefined') {\n      return null;\n    }\n\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : null;\n    } catch (error) {\n      console.warn(`Error reading localStorage key “${key}”:`, error);\n      return null;\n    }\n  }, [key]);\n  const [storedValue, setStoredValue] = useState(readValue);\n  useEffect(() => {\n    setStoredValue(readValue());\n  }, []);\n  const handleStorageChange = useCallback(event => {\n    if (event?.key && event.key !== key) {\n      return;\n    }\n\n    setStoredValue(readValue());\n  }, [key, readValue]);\n  useEventListener('storage', handleStorageChange);\n  useEventListener('local-storage', handleStorageChange);\n  return storedValue;\n}\n\nexport default useReadLocalStorage;","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAGA,SAASC,gBAAT,QAAiC,qBAAjC;;AAIA,SAASC,mBAAT,CAAgCC,GAAhC,EAA2C;EAGzC,MAAMC,SAAS,GAAGN,WAAW,CAAC,MAAe;IAE3C,IAAI,OAAOO,MAAP,KAAkB,WAAtB,EAAmC;MACjC,OAAO,IAAP;IACD;;IAED,IAAI;MACF,MAAMC,IAAI,GAAGD,MAAM,CAACE,YAAP,CAAoBC,OAApB,CAA4BL,GAA5B,CAAb;MACA,OAAOG,IAAI,GAAIG,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAJ,GAA6B,IAAxC;IACD,CAHD,CAGE,OAAOK,KAAP,EAAc;MACdC,OAAO,CAACC,IAAR,CAAa,mCAAmCV,GAAG,IAAnD,EAAyDQ,KAAzD;MACA,OAAO,IAAP;IACD;EACF,CAb4B,EAa1B,CAACR,GAAD,CAb0B,CAA7B;EAiBA,MAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,CAAWI,SAAX,CAA9C;EAGAL,SAAS,CAAC,MAAK;IACbgB,cAAc,CAACX,SAAS,EAAV,CAAd;EAED,CAHQ,EAGN,EAHM,CAAT;EAKA,MAAMY,mBAAmB,GAAGlB,WAAW,CACpCmB,KAAD,IAAsC;IACpC,IAAKA,KAAsB,EAAEd,GAAxB,IAAgCc,KAAsB,CAACd,GAAvB,KAA+BA,GAApE,EAAyE;MACvE;IACD;;IACDY,cAAc,CAACX,SAAS,EAAV,CAAd;EACD,CANoC,EAOrC,CAACD,GAAD,EAAMC,SAAN,CAPqC,CAAvC;EAWAH,gBAAgB,CAAC,SAAD,EAAYe,mBAAZ,CAAhB;EAIAf,gBAAgB,CAAC,eAAD,EAAkBe,mBAAlB,CAAhB;EAEA,OAAOF,WAAP;AACD;;AAED,eAAeZ,mBAAf","names":["useCallback","useEffect","useState","useEventListener","useReadLocalStorage","key","readValue","window","item","localStorage","getItem","JSON","parse","error","console","warn","storedValue","setStoredValue","handleStorageChange","event"],"sources":["/Users/igor_acb/BxBlue_Igor/front_end/node_modules/usehooks-ts/src/useReadLocalStorage/useReadLocalStorage.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react'\n\n// See: https://usehooks-ts.com/react-hook/use-event-listener\nimport { useEventListener } from '../useEventListener'\n\ntype Value<T> = T | null\n\nfunction useReadLocalStorage<T>(key: string): Value<T> {\n  // Get from local storage then\n  // parse stored json or return initialValue\n  const readValue = useCallback((): Value<T> => {\n    // Prevent build error \"window is undefined\" but keep keep working\n    if (typeof window === 'undefined') {\n      return null\n    }\n\n    try {\n      const item = window.localStorage.getItem(key)\n      return item ? (JSON.parse(item) as T) : null\n    } catch (error) {\n      console.warn(`Error reading localStorage key “${key}”:`, error)\n      return null\n    }\n  }, [key])\n\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<Value<T>>(readValue)\n\n  // Listen if localStorage changes\n  useEffect(() => {\n    setStoredValue(readValue())\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const handleStorageChange = useCallback(\n    (event: StorageEvent | CustomEvent) => {\n      if ((event as StorageEvent)?.key && (event as StorageEvent).key !== key) {\n        return\n      }\n      setStoredValue(readValue())\n    },\n    [key, readValue],\n  )\n\n  // this only works for other documents, not the current one\n  useEventListener('storage', handleStorageChange)\n\n  // this is a custom event, triggered in writeValueToLocalStorage\n  // See: useLocalStorage()\n  useEventListener('local-storage', handleStorageChange)\n\n  return storedValue\n}\n\nexport default useReadLocalStorage\n"]},"metadata":{},"sourceType":"module"}