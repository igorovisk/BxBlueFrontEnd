{"ast":null,"code":"var _jsxFileName = \"/Users/igor_acb/BxBlue_Igor/front_end/src/contexts/authContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { createContext, useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction checkIfLoggedIn() {\n  const loginToken = localStorage.getItem(\"tokenObj\") || \"\";\n  console.log(loginToken, \"LOGIN TOKEN\");\n\n  if (loginToken) {\n    const parsedToken = JSON.parse(loginToken) || {};\n\n    if (new Date(parsedToken.expirationDate) > new Date()) {\n      return true;\n    }\n  } else return false;\n}\n\nexport const AuthContext = /*#__PURE__*/createContext({\n  handleLogin: (email, password) => {},\n  handleLogout: () => {},\n  isLogged: checkIfLoggedIn()\n}); //AUTHCONTEXT PROVIDER COMPONENT THAT WILL WRAP THE ENTIRE APP.\n\nexport const AuthProvider = props => {\n  _s();\n\n  const [isLogged, setIsLogged] = useState(true);\n  const [jwtToken, setJwtToken] = useState(\"\"); // LOGIN FUNCTION TO BE PASSED TO COMPONENTS BY CONTEXT\n\n  async function handleLogin(email, password) {\n    try {\n      axios.post(\"http://localhost:3000/login\", {\n        email: email,\n        password: password\n      }).then(data => {\n        console.log(data.data, \"DATA\");\n        setIsLogged(true);\n        setJwtToken(data.token);\n        const tokenObj = {\n          token: data.token,\n          userId: data._id,\n          name: data.name,\n          auth: data.auth\n        };\n        localStorage.setItem(\"tokenObj\", JSON.stringify(tokenObj));\n        console.log(localStorage, \"LOCALSTORAGE\");\n        setJwtToken(data.token);\n        window.location.href = \"/home\";\n      });\n    } catch (err) {\n      console.log(err.message, \"error\");\n    }\n  } // LOGOUT FUNCTION\n\n\n  function handleLogout() {\n    localStorage.setItem(\"tokenObj\", \"\");\n  } //CONTEXT VALUE TO BE PASSED TO PROVIDER AND BE ACESSED BY OTHER COMPONENTS (value attribute is like a custom prop in a custom component)\n\n\n  const authContextValue = {\n    handleLogin,\n    isLogged,\n    handleLogout,\n    jwtToken\n  }; //RETURNS PROVIDER WITH VALUE PROP\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authContextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 7\n  }, this);\n}; //CUSTOM HOOK TO MAKE IMPORT EASIER. USAGE EXAMPLE: const authcontext = useAuth()\n\n_s(AuthProvider, \"BRQEvXRj6v0MYcQZq68SggFH1uk=\");\n\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n\n  return useContext(AuthContext);\n};\n\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["axios","createContext","useContext","useState","checkIfLoggedIn","loginToken","localStorage","getItem","console","log","parsedToken","JSON","parse","Date","expirationDate","AuthContext","handleLogin","email","password","handleLogout","isLogged","AuthProvider","props","setIsLogged","jwtToken","setJwtToken","post","then","data","token","tokenObj","userId","_id","name","auth","setItem","stringify","window","location","href","err","message","authContextValue","children","useAuth"],"sources":["/Users/igor_acb/BxBlue_Igor/front_end/src/contexts/authContext.tsx"],"sourcesContent":["import axios from \"axios\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\n\nfunction checkIfLoggedIn() {\n   const loginToken = localStorage.getItem(\"tokenObj\") || \"\";\n   console.log(loginToken, \"LOGIN TOKEN\");\n   if (loginToken) {\n      const parsedToken = JSON.parse(loginToken) || {};\n      if (new Date(parsedToken.expirationDate) > new Date()) {\n         return true;\n      }\n   } else return false;\n}\n\nexport const AuthContext = createContext({\n   handleLogin: (email: string, password: string) => {},\n   handleLogout: () => {},\n   isLogged: checkIfLoggedIn(),\n});\n\n//AUTHCONTEXT PROVIDER COMPONENT THAT WILL WRAP THE ENTIRE APP.\nexport const AuthProvider = (props: any) => {\n   const [isLogged, setIsLogged] = useState<boolean>(true);\n   const [jwtToken, setJwtToken] = useState<string>(\"\");\n   // LOGIN FUNCTION TO BE PASSED TO COMPONENTS BY CONTEXT\n   async function handleLogin(email: string, password: string) {\n      try {\n         axios\n            .post(\"http://localhost:3000/login\", {\n               email: email,\n               password: password,\n            })\n            .then((data: any) => {\n               console.log(data.data, \"DATA\");\n               setIsLogged(true);\n               setJwtToken(data.token);\n               const tokenObj = {\n                  token: data.token,\n                  userId: data._id,\n                  name: data.name,\n                  auth: data.auth,\n               };\n               localStorage.setItem(\"tokenObj\", JSON.stringify(tokenObj));\n               console.log(localStorage, \"LOCALSTORAGE\");\n               setJwtToken(data.token);\n               window.location.href = \"/home\";\n            });\n      } catch (err: any) {\n         console.log(err.message, \"error\");\n      }\n   }\n\n   // LOGOUT FUNCTION\n   function handleLogout() {\n      localStorage.setItem(\"tokenObj\", \"\");\n   }\n\n   //CONTEXT VALUE TO BE PASSED TO PROVIDER AND BE ACESSED BY OTHER COMPONENTS (value attribute is like a custom prop in a custom component)\n   const authContextValue = {\n      handleLogin,\n      isLogged,\n      handleLogout,\n      jwtToken,\n   };\n\n   //RETURNS PROVIDER WITH VALUE PROP\n   return (\n      <AuthContext.Provider value={authContextValue}>\n         {props.children}\n      </AuthContext.Provider>\n   );\n};\n\n//CUSTOM HOOK TO MAKE IMPORT EASIER. USAGE EXAMPLE: const authcontext = useAuth()\nexport const useAuth = () => useContext(AuthContext);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}